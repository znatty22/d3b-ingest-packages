
name: 🚦 CI - Ingest Packages 

on:
  pull_request:
    types: [opened, reopened, edited, synchronize, closed] 

concurrency:
  group: ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_DIR: d3b_ingest_packages/packages
  KF_STUDY_CREATOR_API_TOKEN: ${{ secrets.KF_STUDY_CREATOR_API_TOKEN }} 
  FLY_WEB_APP: metabase-ingest-portal-pr${{ github.event.number }} 
  FLY_POSTGRES_HOSTNAME: ${{ secrets.FLY_POSTGRES_HOSTNAME }}  
  FLY_POSTGRES_APP: ${{ secrets.FLY_POSTGRES_APP }} 
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  POSTGRES_ADMIN: ${{ secrets.POSTGRES_ADMIN }} 
  POSTGRES_ADMIN_PASSWORD: ${{ secrets.POSTGRES_ADMIN_PASSWORD }} 
  INGEST_PROCESS_USER: ${{ secrets.INGEST_PROCESS_USER }}
  INGEST_PROCESS_PASSWORD: ${{ secrets.INGEST_PROCESS_PASSWORD }}
  INGEST_VIEWER_USER: ${{ secrets.INGEST_VIEWER_USER }}
  INGEST_VIEWER_PASSWORD: ${{ secrets.INGEST_VIEWER_PASSWORD }}
  INGEST_DB_DBNAME: ingest_db_pr${{ github.event.number }}
  MB_DB_TYPE: postgres
  MB_DB_DBNAME: metabase_db_pr${{ github.event.number }}
  MB_DB_USER: ${{ secrets.MB_DB_USER }} 
  MB_DB_PASS: ${{ secrets.MB_DB_PASS }} 
  MB_APP_ADMIN: ${{ github.event.pull_request.base.user.login }}
  MB_APP_ADMIN_PASS: ${{ secrets.METABASE_APP_ADMIN_PASS }} 
  MB_APP_ADMIN_EMAIL: ${{ github.event.pull_request.base.user.login }}@example.com

jobs:
  setup:
    name: 🛠 Setup
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    outputs:
      package: ${{ steps.package_path.outputs.package }}
      metabase_app_url: ${{ steps.app_url.outputs.metabase_app_url }}
    steps:
      - name: 👩‍💻 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: 📦 Install deps
        run: |
          pip install --upgrade virtualenv
          virtualenv -p python3 venv
          source venv/bin/activate
          pip install pyyaml

      - name: 📦 Get Package Path
        id: package_path 
        run: |
          source venv/bin/activate
          PACKAGE=$(./scripts/collect_packages.py)
          echo "Package path $PACKAGE "
          echo "package=$PACKAGE" >> $GITHUB_OUTPUT

      - name: 🛠 Create metabase app url
        id: app_url
        run: |
          MB_APP_URL=https://${{ env.FLY_WEB_APP }}.fly.dev
          echo "metabase_app_url=$MB_APP_URL" >> $GITHUB_OUTPUT
          echo "Metabaase App URL: $MB_APP_URL"

  ingest:
    name: 🚦 Ingest Dry Run 
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: setup 
    if: ${{ github.event.action != 'closed' }}
    outputs:
      counts: ${{ steps.count.outputs.counts }}
      validation_report_url: ${{ steps.netlify.outputs.deploy-url }}
    steps:
      - name: 👩‍💻 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: 📦 Install deps
        run: |
          pip install --upgrade virtualenv
          virtualenv -p python3 venv
          source venv/bin/activate
          pip install -e .

      - name: 🏭 Dry Run Ingest
        run: |
          source venv/bin/activate
          kidsfirst test "$PACKAGE_DIR/${{ needs.setup.outputs.package }}"
      
      - name: 🔢 Generate Counts
        id: count
        run: |
          source venv/bin/activate
          ./scripts/counts.py "${{ needs.setup.outputs.package }}"
          echo "counts<<EOF" >> $GITHUB_OUTPUT
          echo "$(cat $PACKAGE_DIR/${{ needs.setup.outputs.package }}/ci_results.txt)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🪰 Install Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: 0.0.368

      - name: 🌐 Proxy Postgres
        run: |
          exec 3< <( flyctl proxy 5432 -a ${{ env.FLY_POSTGRES_APP }})
          sed '/Proxying local port 5432/q' <&3 ; cat <&3 &

      - name: 🗃 Load Ingest Output into DB
        run: |
          source venv/bin/activate
          echo "Initializing database $INGEST_DB_DBNAME ..."
          ./scripts/init_db.py $INGEST_DB_DBNAME -u ${{ env.POSTGRES_ADMIN }} -w ${{ env.POSTGRES_ADMIN_PASSWORD }} 
          echo "Loading database $INGEST_DB_DBNAME with ingest data ..."
          ./scripts/load_db.py ${{ needs.setup.outputs.package }} $INGEST_DB_DBNAME 
      
      - name: 🖥 Build Validation Website
        run: |
          source venv/bin/activate
          ./scripts/prep_web.py ${{ needs.setup.outputs.package }} https://github.com/${{ github.repository }}/pull/${{ github.event.number }}
          cd web && mkdocs build && cd ..

      - name: 🚀 Deploy Validation Report to Netlify
        id: netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: './web/site'
          deploy-message: "🚀 Deploy from GitHub Actions"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          alias: ingest-pr${{ github.event.number }} 
          fails-without-credentials: true
          enable-pull-request-comment: false
          enable-commit-comment: false
          enable-commit-status: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  create-metabase-app:
    name: ✨ Create Metabase App 
    needs: ingest
    runs-on: ubuntu-20.04
    if: ${{ github.event.action != 'closed' }}
    timeout-minutes: 10
    outputs:
      metabase_exists: ${{ steps.check.outputs.metabase_exists }}
    steps:
      - name: 🪰 Install Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: 0.0.368

      - name: 🧐 Check app exists
        id: check
        run: |
          METABASE_EXISTS=$(echo $(flyctl apps list | grep -E -cim1 '^${{ env.FLY_WEB_APP }}\s+'))
          echo "metabase_exists=$METABASE_EXISTS" >> $GITHUB_OUTPUT

      - name: ✨ Create app
        if: ${{ steps.check.outputs.metabase_exists == '0' }}
        run: flyctl apps create --name ${{ env.FLY_WEB_APP }}

      - name: 🧱 Set app scale
        if: ${{ steps.check.outputs.metabase_exists == '0' }}
        run: flyctl scale memory --app ${{ env.FLY_WEB_APP }} 2048

      - name: 🔐 Set app deployment secrets
        if: ${{ steps.check.outputs.metabase_exists == '0' }}
        run: |
          # These secrets are needed to deploy metabase
          flyctl secrets --app ${{ env.FLY_WEB_APP }} set \
            MB_DB_HOST=${{ env.FLY_POSTGRES_HOSTNAME }} \
            MB_DB_PORT=${{ env.POSTGRES_PORT }} \
            MB_DB_DBNAME=${{ env.MB_DB_DBNAME }} \
            MB_DB_USER=${{ env.MB_DB_USER }} \
            MB_DB_PASS=${{ env.MB_DB_PASS }} \
            MB_DB_TYPE=${{ env.MB_DB_TYPE }}

  healthcheck:
    name: ❤️‍🩹 Metabase Health Check
    needs: [setup, create-metabase-app] 
    runs-on: ubuntu-20.04
    if: ${{ github.event.action != 'closed' && needs.create-metabase-app.outputs.metabase_exists != '0' }}
    timeout-minutes: 10
    outputs:
      metabase_deployed: ${{ steps.store-deploy-check.outputs.metabase_deployed }}
      metabase_setup: ${{ steps.store-setup-check.outputs.metabase_setup }}
    steps:
       - name: 👩‍💻 Checkout code
         uses: actions/checkout@v3
           
       - name: 🛠 Set metabase app env vars
         run: |
           echo "MB_APP_URL=${{ needs.setup.outputs.metabase_app_url }}" >> $GITHUB_ENV

       - name: 🩺 Check metabase health 
         id: deploy-check 
         continue-on-error: true
         run: |
           curl -f -X GET $MB_APP_URL/api/health

       - name: 💼 Store metabase health 
         id: store-deploy-check 
         run: |
           METABASE_DEPLOYED=${{ steps.deploy-check.outcome }} 
           echo "metabase_deployed=$METABASE_DEPLOYED" >> $GITHUB_OUTPUT
           echo "Metabase deployed? $METABASE_DEPLOYED"

       - name: 🛂 Get metabase token 
         continue-on-error: true
         id: metabase-token
         run: |
           token=$(curl -s -X POST $MB_APP_URL/api/session \
               -H "Content-type: application/json" \
               -d '{
               "username": "'$MB_APP_ADMIN_EMAIL'",
               "password": "'$MB_APP_ADMIN_PASS'" 
           }' | jq -r '.id')
           echo "METABASE_TOKEN=$token" >> $GITHUB_ENV

       - name: 🛠 Check metabase setup 
         id: setup-check
         continue-on-error: true
         run: |
           curl -s -f -XGET "$MB_APP_URL/api/user" \
               -H 'Content-Type: application/json' \
               -H "X-Metabase-Session: $METABASE_TOKEN" 

       - name: 💼 Store metabase setup 
         id: store-setup-check 
         run: |
           METABASE_SETUP=${{ steps.setup-check.outcome }} 
           echo "metabase_setup=$METABASE_SETUP" >> $GITHUB_OUTPUT
           echo "Metabase setup? $METABASE_SETUP"
          

  deploy-metabase:
    name: 🚀 Deploy Metabase App 
    needs: [ healthcheck ] 
    runs-on: ubuntu-20.04
    if: ${{ github.event.action != 'closed' && needs.healthcheck.outputs.metabase_deployed != 'success' }}
    timeout-minutes: 10
    steps:
       - name: 👩‍💻 Checkout code
         uses: actions/checkout@v3

       - name: 🐍 Setup Python
         uses: actions/setup-python@v3
         with:
           python-version: '3.8'

       - name: 📦 Install deps
         run: |
           pip install --upgrade virtualenv
           virtualenv -p python3 venv
           source venv/bin/activate
           pip install -e .
      
       - name: 🪰 Install Fly CLI
         uses: superfly/flyctl-actions/setup-flyctl@master
         with:
           version: 0.0.368
          
       - name: 🌐 Proxy Postgres
         run: |
           exec 3< <( flyctl proxy 5432 -a ${{ env.FLY_POSTGRES_APP }})
           sed '/Proxying local port 5432/q' <&3 ; cat <&3 &
           
       - name: 🗃 Init metabase DB
         run: |
           source venv/bin/activate
           echo "Initializing metabase $MB_DB_DBNAME ..."
           ./scripts/init_metabase_db.py $MB_DB_DBNAME -u $MB_DB_USER -w $MB_DB_PASS -n $POSTGRES_HOST -p $POSTGRES_PORT
           
       - name: 🚀 Fly deploy
         run: |
          flyctl deploy --remote-only --app ${{ env.FLY_WEB_APP }} --config fly.metabase.toml

  setup-metabase:
    name: 🛠 Setup Metabase Admin User
    needs: [ setup, deploy-metabase ]  
    runs-on: ubuntu-20.04
    if: ${{ github.event.action != 'closed' && needs.healthcheck.outputs.metabase_setup != 'success' }}
    timeout-minutes: 10
    steps:
       - name: 👩‍💻 Checkout code
         uses: actions/checkout@v3

       - name: 🐍 Setup Python
         uses: actions/setup-python@v3
         with:
           python-version: '3.8'

       - name: 📦 Install deps
         run: |
           pip install --upgrade virtualenv
           virtualenv -p python3 venv
           source venv/bin/activate
           pip install -e .
      
       - name: 🪰 Install Fly CLI
         uses: superfly/flyctl-actions/setup-flyctl@master
         with:
           version: 0.0.368
          
       - name: ⏰ Wait for Init Complete
         id: metabase-init-check
         run: |
           INIT_COMPLETE=$(echo $(flyctl logs --app ${{ env.FLY_WEB_APP }} | grep -cm1 "Metabase Initialization COMPLETE"))
           echo "init_complete=$INIT_COMPLETE" >> $GITHUB_OUTPUT

       - name: 🛠 Set metabase app env vars
         run: |
           echo "MB_APP_URL=${{ needs.setup.outputs.metabase_app_url }}" >> $GITHUB_ENV
       
       - name: 🛠 Setup metabase app
         if: ${{ steps.metabase-init-check.outputs.init_complete != '0' }} 
         run: |
           source venv/bin/activate
           echo "Setting up metabase admin user ${{ env.MB_APP_ADMIN }} and db connection to ${{ env.INGEST_DB_DBNAME }} ..."
           export INGEST_DB_HOST=${{ env.FLY_POSTGRES_HOSTNAME }}
           export INGEST_DB_PORT=${{ env.POSTGRES_PORT }}
           ./scripts/setup_metabase.py ${{ env.INGEST_DB_DBNAME }} ${{ needs.setup.outputs.package }}  

  pr-comment-ingest:
    name: 🏷 Create Ingest PR Comment 
    needs: [setup, ingest] 
    runs-on: ubuntu-20.04
    if: ${{ github.event.action != 'closed'}}
    timeout-minutes: 10
    steps:
      - name: 🏷 PR Deploy Preview Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: ${{ needs.setup.outputs.package }}-ingest
          message: |
            ## 🚦 Validation Results - ${{ needs.setup.outputs.package }}

            Latest commit: ${{ github.event.pull_request.head.sha }}

            ### 🗒️ Validation Report
            [View the validation report](${{ needs.ingest.outputs.validation_report_url }}) to see the results of standard data checks performed on the 
            output of the ingested data from each stage 

            ${{ needs.ingest.outputs.counts }}

  pr-comment-metabase:
    name: 🏷 Create Metabase PR Comment 
    needs: [ setup, setup-metabase ] 
    runs-on: ubuntu-20.04
    if: ${{ github.event.action != 'closed'}}
    timeout-minutes: 10
    steps:
      - name: 🏷 PR Deploy Preview Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: ${{ needs.setup.outputs.package }}-metabase
          message: |
            ## 🔎 Explore Your Data - ${{ needs.setup.outputs.package }}

             ### 📊 Ingest Data Portal 
             [View the portal](${{ needs.setup.outputs.metabase_app_url }}) to explore the output tables of your ingest package
             in a postgres database. Admin login info:  

             **Username**: ${{ env.MB_APP_ADMIN_EMAIL }}
             **Password**: Ask the github repo admin 

  teardown:
    name: 🔥 Teardown 
    runs-on: ubuntu-20.04
    if: ${{ github.ref != 'refs/heads/main' && github.event.action == 'closed' }}
    timeout-minutes: 15
    steps:
      - name: 👩‍💻 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: 📦 Install deps
        run: |
          pip install --upgrade virtualenv
          virtualenv -p python3 venv
          source venv/bin/activate
          pip install -e .
          
      - name: 🪰 Install Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: 0.0.368
          
      - name: 🌐 Proxy Postgres
        run: |
          exec 3< <( flyctl proxy 5432 -a ${{ env.FLY_POSTGRES_APP }})
          sed '/Proxying local port 5432/q' <&3 ; cat <&3 &

      - name: 🚮 Drop dbs
        run: |
          source venv/bin/activate

          ./scripts/drop_db.py $INGEST_DB_DBNAME \
          -u ${{ env.POSTGRES_ADMIN }} \
          -w ${{ env.POSTGRES_ADMIN_PASSWORD }} 

          ./scripts/drop_db.py $MB_DB_DBNAME \
          -u ${{ env.POSTGRES_ADMIN }} \
          -w ${{ env.POSTGRES_ADMIN_PASSWORD }} 

      - name: 🧐 Check app exists
        id: check
        run: |
          METABASE_EXISTS=$(echo $(flyctl apps list | grep -E -cim1 '^${{ env.FLY_WEB_APP }}\s+'))
          echo "metabase_exists=$METABASE_EXISTS" >> $GITHUB_OUTPUT

      - name: 🔥 Destroy app
        if: ${{ steps.check.outputs.metabase_exists != '0' }}
        run: flyctl apps destroy ${{ env.FLY_WEB_APP }} -y

